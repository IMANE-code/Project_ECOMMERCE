{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Youcode\\\\memory1\\\\src\\\\Categorie.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MyComponent() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]); // Remarque : le tableau vide de dépendances [] indique\n  // que useEffect ne s’exécutera qu’une fois, un peu comme\n  // componentDidMount()\n\n  useEffect(() => {\n    fetch(\"https://api.example.com/items\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result.items);\n    }, // Remarque : il faut gérer les erreurs ici plutôt que dans\n    // un bloc catch() afin que nous n’avalions pas les exceptions\n    // dues à de véritables bugs dans les composants.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Erreur : \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 14\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 14\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.name, \" \", item.price]\n      }, item.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(MyComponent, \"m9AscAN57M/MODoTwSsNC5AuztA=\");\n\n_c = MyComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"sources":["C:/Users/Youcode/memory1/src/Categorie.js"],"names":["React","Component","MyComponent","error","setError","useState","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","then","res","json","result","message","map","item","name","price"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAGA,SAASC,WAAT,GAAuB;AAAA;;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BF,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC,CAHmB,CAKnB;AACA;AACA;;AACAK,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAAC,+BAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVR,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACM,MAAM,CAACP,KAAR,CAAR;AACD,KANL,EAOI;AACA;AACA;AACCL,IAAAA,KAAD,IAAW;AACTI,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAH,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbL;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIA,KAAJ,EAAW;AACT,wBAAO;AAAA,8BAAeA,KAAK,CAACa,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACV,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,wBACE;AAAA,gBACGE,KAAK,CAACS,GAAN,CAAUC,IAAI,iBACb;AAAA,mBACGA,IAAI,CAACC,IADR,OACeD,IAAI,CAACE,KADpB;AAAA,SAASF,IAAI,CAACC,IAAd;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AASD;AACF;;GAzCMjB,W;;KAAAA,W","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\nfunction MyComponent() {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n  \r\n    // Remarque : le tableau vide de dépendances [] indique\r\n    // que useEffect ne s’exécutera qu’une fois, un peu comme\r\n    // componentDidMount()\r\n    useEffect(() => {\r\n      fetch(\"https://api.example.com/items\")\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            setIsLoaded(true);\r\n            setItems(result.items);\r\n          },\r\n          // Remarque : il faut gérer les erreurs ici plutôt que dans\r\n          // un bloc catch() afin que nous n’avalions pas les exceptions\r\n          // dues à de véritables bugs dans les composants.\r\n          (error) => {\r\n            setIsLoaded(true);\r\n            setError(error);\r\n          }\r\n        )\r\n    }, [])\r\n  \r\n    if (error) {\r\n      return <div>Erreur : {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Chargement...</div>;\r\n    } else {\r\n      return (\r\n        <ul>\r\n          {items.map(item => (\r\n            <li key={item.name}>\r\n              {item.name} {item.price}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}